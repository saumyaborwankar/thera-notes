openapi: 3.0.0

info:
  title: Core Api
  description: Optional multiline or single-line description in [CommonMark](http://commonmark.org/help/) or HTML.
  version: 0.0.5

servers:
  - url: http://api.example.com/v1
    description: Optional server description, e.g. Main (production) server
  - url: http://localhost:3000
    description: Local Api

paths:
  /login:
    post:
      operationId: login
      description: Route for logging in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/AuthDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AuthResponse"
      tags:
        - auth
  /signup:
    post:
      operationId: signup
      description: Route for siginig up
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/SingupAuthDto"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AuthResponse"
      tags:
        - auth
  /logout:
    post:
      operationId: logout
      description: Route for logout
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: boolean
      tags:
        - auth
  /refresh:
    post:
      operationId: refresh
      description: Route for refreshing tokens
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/AuthResponse"
      tags:
        - auth
  /validate:
    post:
      operationId: validate
      description: Route for validating if tokens are valid
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/UserResponse"
      tags:
        - auth
  /client:
    post:
      operationId: addClient
      description: Route to add a client for a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/NewClientDetails"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Client"
      tags:
        - client
    get:
      operationId: getClients
      description: Route to get all client for a user
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Client"
      tags:
        - client
  /client/{clientId}:
    get:
      operationId: getClientById
      description: Route to get a client for a user
      parameters:
        - name: clientId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Client"
      tags:
        - client
    delete:
      operationId: deleteClient
      description: Route to delete a client for a user
      parameters:
        - name: clientId
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags:
        - client
  /note:
    post:
      operationId: addNote
      description: Route to add a note for a client
      requestBody:
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/NewNoteDetails"
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Note"
      tags:
        - note
  /note/{id}:
    get:
      operationId: getNotesForClient
      description: Route to get notes for a client
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Note"
      tags:
        - note
    delete:
      operationId: deleteNote
      description: Route to delete a note for a user
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        "200":
          description: ""
      tags:
        - note
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    NewClientDetails:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        address:
          type: string
        age:
          type: number
    NewNoteDetails:
      type: object
      properties:
        clientId:
          type: string
        content:
          type: string
    UserResponse:
      type: object
      properties:
        id:
          type: string
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - id
        - username
        - firstName
        - lastName
        - email
        - createdAt
        - updatedAt
    AuthDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    SingupAuthDto:
      allOf:
        - $ref: "#/components/schemas/AuthDto"
        - type: object
          properties:
            username:
              type: string
            firstName:
              type: string
            lastName:
              type: string

      required:
        - username
    Tokens:
      type: object
      properties:
        accessToken:
          type: string
        refreshToken:
          type: string
      required:
        - accessToken
        - refreshToken
    AuthResponse:
      type: object
      properties:
        tokens:
          $ref: "#/components/schemas/Tokens"
        user:
          $ref: "#/components/schemas/UserResponse"
      required:
        - tokens
        - user
    Client:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
        age:
          type: number
        address:
          type: string
      required:
        - id
        - userId
        - firstName
        - createdAt
        - updatedAt
        - age
    Note:
      type: object
      properties:
        id:
          type: string
        userId:
          type: string
        clientId:
          type: string
        content:
          type: string
        createdAt:
          type: string
        updatedAt:
          type: string
      required:
        - id
        - userId
        - clientId
        - content
        - createdAt
        - updatedAt
    UserTier:
      type: string
      enum:
        - Free
        - Basic
        - Advanced
